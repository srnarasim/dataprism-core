"use strict";var T=Object.create;var D=Object.defineProperty;var $=Object.getOwnPropertyDescriptor;var S=Object.getOwnPropertyNames;var C=Object.getPrototypeOf,L=Object.prototype.hasOwnProperty;var M=(c,e,t)=>e in c?D(c,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):c[e]=t;var z=(c,e,t,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of S(e))!L.call(c,i)&&i!==t&&D(c,i,{get:()=>e[i],enumerable:!(r=$(e,i))||r.enumerable});return c};var P=(c,e,t)=>(t=c!=null?T(C(c)):{},z(e||!c||!c.__esModule?D(t,"default",{value:c,enumerable:!0}):t,c));var s=(c,e,t)=>M(c,typeof e!="symbol"?e+"":e,t);Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});const O=require("@duckdb/duckdb-wasm");function F(c){const e=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(c){for(const t in c)if(t!=="default"){const r=Object.getOwnPropertyDescriptor(c,t);Object.defineProperty(e,t,r.get?r:{enumerable:!0,get:()=>c[t]})}}return e.default=c,Object.freeze(e)}const f=F(O),u=class u{constructor(){s(this,"errorLog",[])}static getInstance(){return u.instance||(u.instance=new u),u.instance}handleError(e,t){const r={message:e instanceof Error?e.message:String(e),code:this.generateErrorCode(t),source:t};return this.errorLog.push(r),console.error(`DataPrism Error [${t}]:`,r),r}generateErrorCode(e){const t=Date.now();return`${e.toUpperCase().slice(0,3)}_${t}`}getErrorHistory(){return[...this.errorLog]}clearErrorHistory(){this.errorLog=[]}};s(u,"instance");let m=u;typeof window<"u"&&window.addEventListener("unhandledrejection",c=>{m.getInstance().handleError(c.reason,"orchestration")});class B{constructor(e){s(this,"config",null);s(this,"baseUrl");this.baseUrl=e||this.detectCDNBaseUrl()}detectCDNBaseUrl(){if(typeof window>"u")return"";const t=Array.from(document.getElementsByTagName("script")).find(r=>r.src&&r.src.includes("dataprism"));if(t){const r=new URL(t.src);return`${r.protocol}//${r.host}${r.pathname.replace(/\/[^\/]*$/,"")}`}return""}async loadConfig(){if(this.config)return this.config;try{const e=`${this.baseUrl}/duckdb-config.json`,t=await fetch(e);if(!t.ok)throw new Error(`Failed to load DuckDB config: ${t.status}`);return this.config=await t.json(),this.config}catch(e){throw console.warn("Failed to load DuckDB config from CDN, using fallback"),e}}async getBundles(){try{const e=await this.loadConfig();if(e.hybrid)return console.log("Using hybrid DuckDB loading (JSDelivr WASM + CDN workers)"),f.getJsDelivrBundles();if(e.bundles)return Object.entries(e.bundles).map(([r,i])=>({name:r,mainModule:`${this.baseUrl}/${i.mainModule}`,mainWorker:`${this.baseUrl}/${i.mainWorker}`,pthreadWorker:i.pthreadWorker?`${this.baseUrl}/${i.pthreadWorker}`:void 0}));throw new Error("Invalid CDN configuration")}catch{return console.log("Using JSDelivr fallback for DuckDB"),f.getJsDelivrBundles()}}async selectBundle(e){try{return Array.isArray(e)&&e.length>0?typeof SharedArrayBuffer<"u"&&e.find(t=>t.name==="coi")?e.find(t=>t.name==="coi"):e.find(t=>t.name==="eh")?e.find(t=>t.name==="eh"):e.find(t=>t.name==="mvp")||e[0]:await f.selectBundle(e)}catch(t){throw console.error("Bundle selection failed:",t),t}}async createDuckDB(){const e=await this.getBundles(),t=await this.selectBundle(e),r=URL.createObjectURL(new Blob([`importScripts("${t.mainWorker}");`],{type:"text/javascript"})),i=new Worker(r),n=new f.ConsoleLogger,o=new f.AsyncDuckDB(n,i);return await o.instantiate(t.mainModule,t.pthreadWorker),o}}class A{constructor(e){s(this,"db",null);s(this,"connection",null);s(this,"initialized",!1);s(this,"errorHandler",m.getInstance());s(this,"cdnLoader");this.cdnLoader=new B(e)}async initialize(){if(!this.initialized)try{this.db=await this.cdnLoader.createDuckDB(),this.connection=await this.db.connect(),this.initialized=!0,console.log("DuckDB initialized successfully")}catch(e){const t=this.errorHandler.handleError(e,"duckdb");throw new Error(`DuckDB initialization failed: ${t.message}`)}}async query(e){if(!this.connection)throw new Error("DuckDB not initialized");const t=performance.now();try{const r=await this.connection.query(e),i=performance.now(),n=r.toArray().map(o=>o.toJSON());return{data:n,metadata:{rowCount:n.length,executionTime:i-t,memoryUsage:this.getMemoryUsage()}}}catch(r){const i=performance.now(),n=this.errorHandler.handleError(r,"duckdb");return{data:[],metadata:{rowCount:0,executionTime:i-t,memoryUsage:this.getMemoryUsage()},error:n}}}async insertData(e,t){if(!this.connection)throw new Error("DuckDB not initialized");try{await this.connection.query(`DROP TABLE IF EXISTS ${e}`),await this.db.registerFileText(`${e}.json`,JSON.stringify(t)),await this.connection.query(`
        CREATE TABLE ${e} AS 
        SELECT * FROM read_json_auto('${e}.json')
      `),console.log(`Successfully loaded ${t.length} rows into table ${e}`)}catch(r){throw this.errorHandler.handleError(r,"duckdb"),r}}async createTable(e,t){if(!this.connection)throw new Error("DuckDB not initialized");try{const r=Object.entries(t).map(([i,n])=>`${i} ${n}`).join(", ");await this.connection.query(`CREATE TABLE ${e} (${r})`)}catch(r){throw this.errorHandler.handleError(r,"duckdb"),r}}async listTables(){if(!this.connection)throw new Error("DuckDB not initialized");try{return(await this.connection.query("SHOW TABLES")).toArray().map(t=>t.toJSON().name)}catch(e){return this.errorHandler.handleError(e,"duckdb"),[]}}async getTableInfo(e){if(!this.connection)throw new Error("DuckDB not initialized");try{return(await this.connection.query(`DESCRIBE ${e}`)).toArray().map(r=>r.toJSON())}catch(t){return this.errorHandler.handleError(t,"duckdb"),[]}}getMemoryUsage(){var e;return((e=performance.memory)==null?void 0:e.usedJSHeapSize)||0}async close(){this.connection&&(await this.connection.close(),this.connection=null),this.db&&(await this.db.terminate(),this.db=null),this.initialized=!1}isInitialized(){return this.initialized}}const h=class h{constructor(){s(this,"dependencies",new Map);s(this,"eventHandlers",[]);s(this,"loadingPromises",new Map);s(this,"timeouts",new Map)}static getInstance(){return h.instance||(h.instance=new h),h.instance}registerDependency(e,t={}){const r={name:e,state:"initializing",loadStartTime:Date.now(),retryCount:0,maxRetries:t.maxRetries||3,timeoutMs:t.timeout||3e4,requiredFor:[],module:null};return this.dependencies.set(e,r),this.emitEvent("loading",e,r),r}async loadDependency(e,t,r={}){if(this.loadingPromises.has(e))return this.loadingPromises.get(e);this.dependencies.get(e)||this.registerDependency(e,r);const i=this.executeLoad(e,t,r);return this.loadingPromises.set(e,i),i}async executeLoad(e,t,r){const i=this.dependencies.get(e);return new Promise((n,o)=>{const a=setTimeout(()=>{this.setState(e,"timeout");const d={message:`Dependency '${e}' failed to load within ${i.timeoutMs}ms`,code:"DEPENDENCY_TIMEOUT",source:"orchestration"};i.error=d,this.emitEvent("timeout",e,i,d),o(d)},i.timeoutMs);this.timeouts.set(e,a),this.performLoad(e,t,r,a).then(d=>{clearTimeout(a),this.timeouts.delete(e),i.module=d,i.loadEndTime=Date.now(),i.version=this.extractVersion(d),this.setState(e,"ready"),this.emitEvent("ready",e,i),n(d)}).catch(d=>{clearTimeout(a),this.timeouts.delete(e);const l={message:`Failed to load dependency '${e}': ${d}`,code:"DEPENDENCY_LOAD_ERROR",source:"orchestration"};if(i.error=l,i.retryCount<i.maxRetries){i.retryCount++,this.emitEvent("retry",e,i,l);const v=r.retryDelay||1e3*i.retryCount;setTimeout(()=>{this.executeLoad(e,t,r).then(n).catch(o)},v)}else this.setState(e,"error"),this.emitEvent("error",e,i,l),o(l)})})}async performLoad(e,t,r,i){return this.setState(e,"loading"),await t()}extractVersion(e){if(e){if(e.version)return e.version;if(e.VERSION)return e.VERSION;if(e.get_version&&typeof e.get_version=="function")try{return e.get_version()}catch{return}if(e.Table&&e.RecordBatch)return"17.0.0"}}setState(e,t){const r=this.dependencies.get(e);r&&(r.state=t,this.dependencies.set(e,r))}emitEvent(e,t,r,i){const n={type:e,dependency:t,metadata:{...r},error:i};this.eventHandlers.forEach(o=>{try{o(n)}catch(a){console.error("Error in dependency event handler:",a)}})}async waitForDependency(e,t=3e4){const r=this.dependencies.get(e);if(!r)throw new Error(`Dependency '${e}' not registered`);if(r.state==="ready")return r.module;if(r.state==="error")throw r.error||new Error(`Dependency '${e}' failed to load`);return new Promise((i,n)=>{const o=setTimeout(()=>{n(new Error(`Timeout waiting for dependency '${e}'`))},t),a=d=>{d.dependency===e&&(d.type==="ready"?(clearTimeout(o),i(d.metadata.module)):(d.type==="error"||d.type==="timeout")&&(clearTimeout(o),n(d.error||new Error(`Dependency '${e}' failed to load`))))};this.addEventListener(a),setTimeout(()=>{this.removeEventListener(a)},t+1e3)})}async waitForReady(e=[],t=3e4){const r=e.length>0?e:Array.from(this.dependencies.keys()),i={};return await Promise.all(r.map(async n=>{try{i[n]=await this.waitForDependency(n,t)}catch(o){throw new Error(`Failed to wait for dependency '${n}': ${o}`)}})),i}isDependencyReady(e){const t=this.dependencies.get(e);return(t==null?void 0:t.state)==="ready"}getDependencyState(e){var t;return(t=this.dependencies.get(e))==null?void 0:t.state}getDependencyMetadata(e){const t=this.dependencies.get(e);return t?{...t}:void 0}getAllDependencies(){return Array.from(this.dependencies.values()).map(e=>({...e}))}getReadyDependencies(){return Array.from(this.dependencies.entries()).filter(([e,t])=>t.state==="ready").map(([e,t])=>e)}getFailedDependencies(){return Array.from(this.dependencies.entries()).filter(([e,t])=>t.state==="error").map(([e,t])=>e)}addEventListener(e){this.eventHandlers.push(e)}removeEventListener(e){const t=this.eventHandlers.indexOf(e);t>-1&&this.eventHandlers.splice(t,1)}async preloadDependencies(e){const t=e.map(async r=>{const i=this.dependencies.get(r);if(!i||i.state==="initializing")throw new Error(`Cannot preload unregistered dependency '${r}'`);return i.state==="ready"?i.module:this.waitForDependency(r)});await Promise.all(t)}clearDependency(e){const t=this.timeouts.get(e);t&&(clearTimeout(t),this.timeouts.delete(e)),this.dependencies.delete(e),this.loadingPromises.delete(e)}clearAll(){this.timeouts.forEach(e=>clearTimeout(e)),this.timeouts.clear(),this.dependencies.clear(),this.loadingPromises.clear(),this.eventHandlers.length=0}getHealthStatus(){const e=this.getAllDependencies(),t=e.filter(a=>a.state==="ready").length,r=e.filter(a=>a.state==="loading").length,i=e.filter(a=>a.state==="error").length,n=e.filter(a=>a.state==="timeout").length,o=e.length>0?t/e.length*100:100;return{totalDependencies:e.length,readyCount:t,loadingCount:r,errorCount:i,timeoutCount:n,healthScore:o}}};s(h,"instance");let w=h;const g=class g{constructor(){s(this,"registry");s(this,"arrowModule",null);this.registry=w.getInstance()}static getInstance(){return g.instance||(g.instance=new g),g.instance}async loadArrow(){if(this.arrowModule)return this.arrowModule;try{const e=await this.registry.loadDependency("apache-arrow",()=>this.loadArrowModule(),{timeout:15e3,maxRetries:3,retryDelay:2e3,required:!0});return this.arrowModule=e,e}catch(e){throw{message:`Failed to load Apache Arrow: ${e}`,code:"ARROW_LOAD_ERROR",source:"orchestration"}}}async loadArrowModule(){const e=[()=>this.loadFromGlobal(),()=>this.loadFromImport(),()=>this.loadFromCDN(),()=>this.loadFromFallback()];let t=null;for(const r of e)try{const i=await r();if(this.validateArrowModule(i))return i}catch(i){t=i;continue}throw new Error(`All Arrow loading strategies failed. Last error: ${t==null?void 0:t.message}`)}async loadFromGlobal(){if(typeof window<"u"&&window.Arrow)return window.Arrow;throw new Error("Arrow not found in global scope")}async loadFromImport(){try{return await import("apache-arrow")}catch(e){throw new Error(`Dynamic import failed: ${e}`)}}async loadFromCDN(){return new Promise((e,t)=>{const r=document.createElement("script");r.src="https://cdn.jsdelivr.net/npm/apache-arrow@17.0.0/dist/Arrow.dom.min.js",r.onload=()=>{window.Arrow?e(window.Arrow):t(new Error("Arrow not available after CDN load"))},r.onerror=()=>{t(new Error("Failed to load Arrow from CDN"))},document.head.appendChild(r)})}async loadFromFallback(){return new Promise((e,t)=>{const r=document.createElement("script");r.src="https://unpkg.com/apache-arrow@17.0.0/dist/Arrow.dom.min.js",r.onload=()=>{window.Arrow?e(window.Arrow):t(new Error("Arrow not available after fallback CDN load"))},r.onerror=()=>{t(new Error("Failed to load Arrow from fallback CDN"))},document.head.appendChild(r)})}validateArrowModule(e){return e?["Table","RecordBatch","RecordBatchReader","Schema","Field","Vector","Type"].every(r=>typeof e[r]<"u"):!1}async waitForArrow(e=3e4){try{return await this.registry.waitForDependency("apache-arrow",e)}catch{return await this.loadArrow()}}isArrowReady(){return this.registry.isDependencyReady("apache-arrow")}getArrowModule(){return this.arrowModule}async preloadArrow(){this.isArrowReady()||await this.loadArrow()}getArrowVersion(){if(this.arrowModule)return this.arrowModule.version||"17.0.0"}createArrowError(e,t){return{message:`Arrow Error: ${e}${t?` - ${t.message}`:""}`,code:"ARROW_ERROR",source:"orchestration"}}async createRecordBatchReader(e){const t=await this.waitForArrow();try{return t.RecordBatchReader.from(e)}catch(r){throw this.createArrowError("Failed to create RecordBatchReader",r)}}async createTable(e){const t=await this.waitForArrow();try{return t.Table.from(e)}catch(r){throw this.createArrowError("Failed to create Arrow Table",r)}}async validateArrowData(e){try{return await this.waitForArrow(),e?!!(e instanceof Uint8Array||Array.isArray(e)||e.constructor&&e.constructor.name==="Table"||e.constructor&&e.constructor.name==="RecordBatch"):!1}catch{return!1}}};s(g,"instance");let E=g;class k{constructor(e={}){s(this,"duckdb");s(this,"wasmEngine",null);s(this,"wasmModule",null);s(this,"config");s(this,"initialized",!1);s(this,"startTime",Date.now());s(this,"errorHandler",m.getInstance());s(this,"dependencyRegistry",w.getInstance());s(this,"arrowLoader",E.getInstance());s(this,"metrics",{queryCount:0,totalExecutionTime:0,averageResponseTime:0,memoryPeakUsage:0});this.config={enableWasmOptimizations:!0,maxMemoryMB:4096,queryTimeoutMs:3e4,logLevel:"info",...e},this.duckdb=new A}async initialize(){if(!this.initialized)try{const e=[];e.push(this.dependencyRegistry.loadDependency("duckdb",()=>this.duckdb.initialize(),{timeout:3e4,maxRetries:3})),e.push(this.arrowLoader.loadArrow().catch(t=>(this.log("warn",`Arrow initialization failed: ${t.message}`),null))),this.config.enableWasmOptimizations&&e.push(this.dependencyRegistry.loadDependency("wasm-core",()=>this.initializeWasm(),{timeout:2e4,maxRetries:2}).catch(t=>(this.log("warn",`WASM initialization failed: ${t.message}`),this.config.enableWasmOptimizations=!1,null))),await Promise.allSettled(e),this.initialized=!0,this.log("info","DataPrism Engine initialized successfully"),this.logDependencyStatus()}catch(e){throw this.errorHandler.handleError(e,"orchestration"),e}}async initializeWasm(){if(typeof window>"u")throw new Error("WASM not available in Node environment");try{const t=await import("@dataprism/core");try{await t.default("/wasm/dataprism_core_bg.wasm")}catch{await t.default()}t.init_panic_hook(),this.wasmModule=t,this.wasmEngine=new t.QueryEngine,this.log("info",`WASM module version: ${t.get_version()}`)}catch(e){throw new Error(`WASM initialization failed: ${e}`)}}async query(e){if(!this.initialized)throw new Error("Engine not initialized");const t=performance.now();this.metrics.queryCount++;try{const r=await this.duckdb.query(e);return this.config.enableWasmOptimizations&&this.wasmEngine&&this.shouldUseWasmOptimization(r)?await this.applyWasmOptimizations(r):(this.updateMetrics(performance.now()-t,r.metadata.memoryUsage),r)}catch(r){throw this.errorHandler.handleError(r,"orchestration"),r}}async loadData(e,t="main_table"){if(!this.initialized)throw new Error("Engine not initialized");try{await this.duckdb.insertData(t,e),this.log("info",`Loaded ${e.length} rows into table ${t}`)}catch(r){throw this.errorHandler.handleError(r,"orchestration"),r}}async createTable(e,t){if(!this.initialized)throw new Error("Engine not initialized");await this.duckdb.createTable(e,t)}async listTables(){if(!this.initialized)throw new Error("Engine not initialized");return await this.duckdb.listTables()}async getTableInfo(e){if(!this.initialized)throw new Error("Engine not initialized");return await this.duckdb.getTableInfo(e)}shouldUseWasmOptimization(e){return e.data.length>1e3||e.metadata.executionTime>1e3}async applyWasmOptimizations(e){if(!this.wasmEngine)return e;try{const t=new TextEncoder().encode(JSON.stringify(e.data)),r=await this.wasmEngine.process_data(t);return{data:JSON.parse(r.data),metadata:{rowCount:r.row_count,executionTime:e.metadata.executionTime+r.execution_time_ms,memoryUsage:Math.max(e.metadata.memoryUsage,r.memory_used_bytes)}}}catch(t){return this.log("warn",`WASM optimization failed, falling back to original result: ${t}`),e}}updateMetrics(e,t){this.metrics.totalExecutionTime+=e,this.metrics.averageResponseTime=this.metrics.totalExecutionTime/this.metrics.queryCount,this.metrics.memoryPeakUsage=Math.max(this.metrics.memoryPeakUsage,t)}getMemoryUsage(){var e;return this.wasmEngine?this.wasmEngine.get_memory_usage():((e=performance.memory)==null?void 0:e.usedJSHeapSize)||0}getMetrics(){return{...this.metrics}}getStatus(){return{initialized:this.initialized,wasmModuleLoaded:!!this.wasmModule,duckdbConnected:this.duckdb.isInitialized(),memoryUsage:this.getMemoryUsage(),uptime:Date.now()-this.startTime,dependencies:this.getDependencyStatus(),dependencyHealth:this.getDependencyHealth()}}getVersion(){var e;return((e=this.wasmModule)==null?void 0:e.get_version())||"0.1.0"}getBuildInfo(){var e;return((e=this.wasmModule)==null?void 0:e.get_build_info())||{version:"0.1.0",source:"typescript"}}log(e,t){(this.config.logLevel==="debug"||this.config.logLevel==="info"&&e!=="debug"||this.config.logLevel==="warn"&&(e==="warn"||e==="error")||this.config.logLevel==="error"&&e==="error")&&console.log(`[DataPrism:${e.toUpperCase()}] ${t}`)}async waitForReady(e,t=3e4){this.initialized||await this.initialize();try{await this.dependencyRegistry.waitForReady(e,t),this.log("info","All dependencies are ready")}catch(r){const i=this.dependencyRegistry.getHealthStatus();throw this.log("error",`Dependency readiness check failed. Health: ${i.healthScore}%`),r}}async waitForDuckDB(e=3e4){await this.dependencyRegistry.waitForDependency("duckdb",e)}async waitForArrow(e=3e4){await this.arrowLoader.waitForArrow(e)}async waitForWasm(e=2e4){this.config.enableWasmOptimizations&&await this.dependencyRegistry.waitForDependency("wasm-core",e)}async preloadDependencies(e=[]){const t=e.length>0?e:["duckdb","apache-arrow"];this.config.enableWasmOptimizations&&t.push("wasm-core");try{await this.dependencyRegistry.preloadDependencies(t),this.log("info",`Preloaded dependencies: ${t.join(", ")}`)}catch(r){this.log("warn",`Failed to preload some dependencies: ${r}`)}}isReady(){return this.initialized&&this.dependencyRegistry.isDependencyReady("duckdb")}getDependencyStatus(){return{duckdb:this.dependencyRegistry.isDependencyReady("duckdb"),arrow:this.arrowLoader.isArrowReady(),wasm:this.config.enableWasmOptimizations?this.dependencyRegistry.isDependencyReady("wasm-core"):!0,overall:this.isReady()}}getDependencyHealth(){return this.dependencyRegistry.getHealthStatus()}logDependencyStatus(){const e=this.getDependencyStatus(),t=this.getDependencyHealth();if(this.log("info",`Dependency Status - DuckDB: ${e.duckdb}, Arrow: ${e.arrow}, WASM: ${e.wasm}`),this.log("info",`Overall Health Score: ${t.healthScore}%`),t.errorCount>0){const r=this.dependencyRegistry.getFailedDependencies();this.log("warn",`Failed dependencies: ${r.join(", ")}`)}}async close(){await this.duckdb.close(),this.wasmEngine=null,this.wasmModule=null,this.initialized=!1,this.dependencyRegistry.clearAll(),this.log("info","DataPrism Engine closed")}}const y=class y{constructor(){}static getInstance(){return y.instance||(y.instance=new y),y.instance}createDependencyError(e,t,r){return{message:this.createContextualMessage(e,t,r),code:this.getDependencyErrorCode(e,t),source:"orchestration",dependency:e,retryCount:(r==null?void 0:r.retryCount)||0,troubleshooting:this.getTroubleshootingSteps(e,t),context:this.gatherContext(e,r)}}createContextualMessage(e,t,r){const i=`Failed to load dependency '${e}': ${t.message}`;if(!r)return i;const n=r.loadEndTime?r.loadEndTime-r.loadStartTime:Date.now()-r.loadStartTime;let o=i;return r.retryCount>0&&(o+=` (Retry ${r.retryCount}/${r.maxRetries})`),n>1e4&&(o+=` - Loading took ${Math.round(n/1e3)}s`),r.requiredFor.length>0&&(o+=` - Required for: ${r.requiredFor.join(", ")}`),o}getDependencyErrorCode(e,t){const r=t.message.toLowerCase();return r.includes("timeout")?`${e.toUpperCase()}_TIMEOUT`:r.includes("network")||r.includes("fetch")?`${e.toUpperCase()}_NETWORK_ERROR`:r.includes("not found")||r.includes("404")?`${e.toUpperCase()}_NOT_FOUND`:r.includes("cors")||r.includes("cross-origin")?`${e.toUpperCase()}_CORS_ERROR`:r.includes("import")||r.includes("module")?`${e.toUpperCase()}_IMPORT_ERROR`:`${e.toUpperCase()}_LOAD_ERROR`}getTroubleshootingSteps(e,t){const r=[],i=t.message.toLowerCase();switch(r.push("Check your internet connection"),r.push("Verify the dependency version is compatible"),e){case"apache-arrow":r.push("Ensure Apache Arrow is available in your build configuration"),r.push("Check if Arrow is properly externalized in your bundler"),r.push("Verify CORS headers if loading from CDN"),r.push("Try loading from a different CDN (JSDelivr, unpkg)"),i.includes("recordbatchreader")&&(r.push("The RecordBatchReader is not available - Arrow may not be fully loaded"),r.push("Try calling await engine.waitForArrow() before using Arrow features"));break;case"duckdb":r.push("Check if DuckDB WASM files are accessible"),r.push("Verify SharedArrayBuffer is available for multi-threading"),r.push("Check COEP/COOP headers for cross-origin isolation"),r.push("Try fallback to single-threaded mode");break;case"wasm-core":r.push("Verify WASM files are built and accessible"),r.push("Check if WebAssembly is supported in your browser"),r.push("Ensure WASM files are served with correct MIME type");break}return i.includes("timeout")&&(r.push("Increase timeout duration in configuration"),r.push("Check if CDN is experiencing issues")),i.includes("cors")&&(r.push("Configure CORS headers on your server"),r.push("Use same-origin resources when possible")),i.includes("network")&&(r.push("Check firewall and proxy settings"),r.push("Try using a different network")),r}gatherContext(e,t){const r={};return t&&(r.loadTime=t.loadEndTime?t.loadEndTime-t.loadStartTime:Date.now()-t.loadStartTime),typeof window<"u"&&(r.browserInfo=`${navigator.userAgent}`,r.networkStatus=navigator.onLine?"online":"offline",e==="wasm-core"&&(r.wasmSupport=typeof WebAssembly<"u"),e==="duckdb"&&(r.sharedArrayBufferSupport=typeof SharedArrayBuffer<"u",r.crossOriginIsolated=window.crossOriginIsolated)),r}formatErrorForLogging(e){let t=`[${e.code}] ${e.message}`;return e.context&&(t+=`
  Context:`,Object.entries(e.context).forEach(([r,i])=>{t+=`
    ${r}: ${i}`})),e.troubleshooting&&e.troubleshooting.length>0&&(t+=`
  Troubleshooting:`,e.troubleshooting.forEach((r,i)=>{t+=`
    ${i+1}. ${r}`})),t}createRetryStrategy(e,t,r){const i=t.message.toLowerCase();let n=!0,o=1e3*Math.pow(2,r),a=3;switch(e){case"apache-arrow":a=4,i.includes("not found")&&(n=!1);break;case"duckdb":a=3,i.includes("sharedarraybuffer")&&(n=!1);break;case"wasm-core":a=2,i.includes("webassembly")&&(n=!1);break}return i.includes("timeout")&&(o=Math.min(o*1.5,1e4)),i.includes("cors")&&(n=!1),(i.includes("404")||i.includes("not found"))&&(n=!1),{shouldRetry:n&&r<a,delay:Math.min(o,1e4),maxRetries:a}}logDependencyError(e){const t=this.formatErrorForLogging(e);e.retryCount===0?console.error("[DataPrism] Dependency Error:",t):console.warn(`[DataPrism] Dependency Retry ${e.retryCount}:`,t)}createUserFriendlyMessage(e){var i;let r=`We're having trouble loading ${e.dependency||"unknown"}. `;return((i=e.context)==null?void 0:i.networkStatus)==="offline"?r+="Please check your internet connection and try again.":e.code.includes("TIMEOUT")?r+="The loading process is taking longer than expected. Please try again.":e.code.includes("CORS")?r+="There's a configuration issue with cross-origin requests. Please contact support.":r+="Please try refreshing the page or contact support if the problem persists.",r}};s(y,"instance");let b=y;const p=class p{constructor(){s(this,"eventHandlers",new Map);s(this,"registry");s(this,"initializationStartTime",0);this.registry=w.getInstance(),this.setupRegistryEventHandlers()}static getInstance(){return p.instance||(p.instance=new p),p.instance}setupRegistryEventHandlers(){this.registry.addEventListener(e=>{this.handleRegistryEvent(e)})}handleRegistryEvent(e){const t={type:this.mapRegistryEventType(e.type,e.dependency),dependency:e.dependency,error:e.error,metadata:e.metadata,timestamp:Date.now()};(e.type==="loading"||e.type==="ready")&&(t.progress=this.calculateProgress()),this.emit(t.type,t),e.type==="ready"&&this.checkAllDependenciesReady()}mapRegistryEventType(e,t){switch(e){case"loading":return"dependencyLoading";case"ready":return this.getSpecificReadyEventType(t);case"error":return"dependencyError";case"timeout":return"dependencyTimeout";case"retry":return"dependencyRetry";default:return"dependencyLoading"}}getSpecificReadyEventType(e){switch(e){case"apache-arrow":return"arrowReady";case"duckdb":return"duckdbReady";case"wasm-core":return"wasmReady";default:return"dependencyReady"}}calculateProgress(){const e=this.registry.getAllDependencies(),t=e.filter(n=>n.state==="ready"),r=e.length,i=t.length;return{loaded:i,total:r,percentage:r>0?Math.round(i/r*100):0}}checkAllDependenciesReady(){const e=this.registry.getAllDependencies(),t=e.filter(r=>r.state==="ready");e.length>0&&t.length===e.length&&this.emit("allDependenciesReady",{type:"allDependenciesReady",progress:this.calculateProgress(),timestamp:Date.now(),metadata:{loadTime:Date.now()-this.initializationStartTime,dependencies:e.map(r=>r.name)}})}addEventListener(e,t){this.eventHandlers.has(e)||this.eventHandlers.set(e,[]),this.eventHandlers.get(e).push(t)}removeEventListener(e,t){const r=this.eventHandlers.get(e);if(r){const i=r.indexOf(t);i>-1&&r.splice(i,1)}}emit(e,t){const r=this.eventHandlers.get(e);r&&r.forEach(i=>{try{i(t)}catch(n){console.error(`Error in DataPrism event handler for ${e}:`,n)}})}onDependencyLoading(e){this.addEventListener("dependencyLoading",e)}onDependencyReady(e){this.addEventListener("dependencyReady",e)}onDependencyError(e){this.addEventListener("dependencyError",e)}onArrowReady(e){this.addEventListener("arrowReady",e)}onDuckDBReady(e){this.addEventListener("duckdbReady",e)}onWasmReady(e){this.addEventListener("wasmReady",e)}onAllDependenciesReady(e){this.addEventListener("allDependenciesReady",e)}onInitializationProgress(e){this.addEventListener("initializationProgress",e)}startInitialization(){this.initializationStartTime=Date.now(),this.emit("initializationProgress",{type:"initializationProgress",progress:{loaded:0,total:0,percentage:0},timestamp:Date.now(),metadata:{stage:"starting"}})}updateInitializationProgress(e,t){const r=this.calculateProgress();this.emit("initializationProgress",{type:"initializationProgress",progress:r,timestamp:Date.now(),metadata:{stage:e,...t}})}createLoadingPromise(e,t=3e4){return new Promise((r,i)=>{const n=setTimeout(()=>{i(new Error(`Timeout waiting for ${e}`))},t),o=a=>{clearTimeout(n),a.error?i(a.error):r(a.metadata)};this.addEventListener(e,o)})}async waitForArrowReady(e=3e4){return this.createLoadingPromise("arrowReady",e)}async waitForDuckDBReady(e=3e4){return this.createLoadingPromise("duckdbReady",e)}async waitForWasmReady(e=2e4){return this.createLoadingPromise("wasmReady",e)}async waitForAllDependenciesReady(e=3e4){return this.createLoadingPromise("allDependenciesReady",e)}getEventStats(){return{totalEvents:0,eventsByType:{},recentEvents:[]}}clearAllEventHandlers(){this.eventHandlers.clear()}createLoadingIndicator(e,t={}){const r=document.createElement("div");r.className=`dataprism-loading-indicator ${t.theme||"light"}`,r.innerHTML=`
      <div class="loading-spinner"></div>
      <div class="loading-message">Initializing DataPrism...</div>
      ${t.showProgress?'<div class="loading-progress"><div class="progress-bar"></div></div>':""}
      ${t.showDetails?'<div class="loading-details"></div>':""}
    `,e.appendChild(r);const i=r.querySelector(".progress-bar"),n=r.querySelector(".loading-message"),o=r.querySelector(".loading-details"),a=d=>{d.progress&&(i&&(i.style.width=`${d.progress.percentage}%`),n&&(n.textContent=`Loading... ${d.progress.percentage}%`),o&&d.dependency&&(o.textContent=`Loading ${d.dependency}...`))};return this.addEventListener("initializationProgress",a),this.addEventListener("dependencyLoading",a),{update:(d,l)=>{i&&(i.style.width=`${d}%`),n&&l&&(n.textContent=l)},destroy:()=>{this.removeEventListener("initializationProgress",a),this.removeEventListener("dependencyLoading",a),r.parentNode&&r.parentNode.removeChild(r)}}}};s(p,"instance");let R=p;const x="0.1.0",I="DataPrism Core";function U(c){return new k(c)}exports.ArrowLoader=E;exports.DataPrismEngine=k;exports.DependencyErrorHandler=b;exports.DependencyEventSystem=R;exports.DependencyRegistry=w;exports.DuckDBManager=A;exports.ErrorHandler=m;exports.createEngine=U;exports.default=k;exports.name=I;exports.version=x;
